#+TITLE: MongoDB
#+AUTHOR: Prof. Miguel Angel Escalante Serrato
#+EMAIL:  miguel.escalante@itam.mx
#+DATE: 8 Sep 2022
#+STARTUP: showall

* Intro Mongo

Mongo en muchas maneras es una gran herramienta y muy vers√°til, depende de c√≥mo la uses se puede adaptar a trabajar con tareas peque√±as, grandes, simples o complejas.

Peeeeeero, el diablo est√° en los detalles como siempre, tambi√©n se puede convertir en su peor pesadilla cuando a la creatividad no se le ponen riendas.

MongoDB (Mongo pa los cuates) vi√≥ la luz por primera vez en 2009 y r√°pido se estableci√≥ como una de las bases de datos NoSQL m√°s usadas, y actualmente es de las m√°s populares si no es que la m√°s popular. MongoDB se dise√±√≥ escalable desde un inicio ( el nombre viene de "hu mongo us" ) el desempe√±o y el f√°cil acceso a los datos fueron parte de su inicio.

Es una base de datos documental, lo cual nos permite guardar objetos anidados, tanto como quieras *sigh*. No pide ning√∫n tipo de /schema/ por lo que los documentos pueden tener campos que ning√∫n otro documento tenga *DEEEP SIGH*.

Aunque la flexibilidad nos llevar√≠a a no tomarlo tan en serio, realmente hay aplicaciones enormes que lo usan en producci√≥n hoy en d√≠a, e.g. Foursquare, Comcast, Adobe, CERN (cacha los datos del LHC).

* Contenedor de Docker
#+begin_src shell
  export DATA_DIR=`pwd`/data
  echo $DATA_DIR
  mkdir -p $DATA_DIR
  docker run -p 27017:27017 \
         -v $DATA_DIR:/data/db \
         -d mongo
#+end_src

#+RESULTS:
| /home/skalas/github/ITAM/nosql2022/notas/data                    |
| de65af32aa5d7f650358c4894a1b567bda86cdbb28bc69daabe8a1095f36f036 |

#+begin_src shell
docker exec -it de65af32 mongosh
#+end_src

*  Uso de MongoDB

**  Creando una DB e insertando documentos

Vamos a usar ~mongosh~ para tener una l√≠nea de comandos. Entraremos el comando:

#+begin_src js
use book
#+end_src

De acuerdo a la documentaci√≥n, este comando "crea una base de datos", pero esto no es enteramente cierto. Esto solo aparta espacio en el MongoDB para comenzar a agregar documentos (ojo: no son registros). No tenemos una BD formalmente creada hasta no agregar documentos a esa BD.

Para saber qu√© BD estamos usando:

#+end_src js
db
#+end_src

Y para ver todas las DBs que tenemos disponibles:

#+end_src js
show dbs
#+end_src

Vamos ahora a agregar un documento:

#+begin_src js
db.towns.insertOne({
   name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio",
      party: "D"
   }
})
#+end_src

#+RESULTS:

Analicemos l√≠nea por l√≠nea:
1. *db* es el objeto con el que ~mongosh~ se refiere a la BD que estamos usando, en este caso ~book~. ‚ö†Ô∏è*IMPORTANTE*:warning: - despu√©s del elemento db, tenemos el elemento *towns*, esto es una *COLECCI√ìN*. Recuerden la jerarqu√≠a de los JSON:

#+DOWNLOADED: screenshot @ 2022-09-08 01:56:15
[[file:images/20220908-015615_screenshot.png]]

Esto significa que estamos creando una colecci√≥n de documentos llamada ~towns~.

Igual, pongan atenci√≥n a uno de los features m√°s relevantes de las Document Databases: :**¬°No necesitamos predefinir estructura/esquema para crear colecciones ni documentos!** ü§ì

Por fin! Libres de la tiran√≠a de tener que definir, pensar, dise√±ar antes de tirar c√≥digo!


#+DOWNLOADED: screenshot @ 2022-09-08 01:58:46
[[file:images/20220908-015846_screenshot.png]]


El ~insertOne~ sirve para insertar solo 1 documento en la colecci√≥n.

El par√©ntesis que abre ~(~ indica el inicio de los argumentos de la funci√≥n ~insertOne~.

La llave que abre ~{~ indica que viene un documento JSON.

2. Inicia el documento con atributos ~name~ (string), ~population~ (number), ~lastCensus~ (Date), ~famousFor~ (array de strings), y ~mayor~ de tipo DOCUMENTO, que es otro objeto anidado con sus propios atributos, ‚ö†Ô∏èTODO SEPARADO POR COMAS‚ö†Ô∏è.

Qu√© pasa si se nos para una coma‚ùì

Un error como estos:

#+begin_src js
db.towns.insertOne({
   name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio"
      party: "D"
   }
})
#+end_src

F√≠jense igual que ~mongosh~ nos ayuda a identar la funci√≥n principal, y los documentos anidados.

3. Al cerrar llaves y par√©ntesis, debemos tener esta salida:

#+begin_src js
db.towns.insertOne({
   name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio",
      party: "D"
   }
})
#+end_src

Qu√© pasa si volvemos a ejecutar la misma inserci√≥n‚ùì

Las Document Databases no tienen "llaves" como las BDs relacionales, entonces *al ejecutar una inserci√≥n 2 veces, para MongoDB son objetos enteramente diferentes*, y de hecho cada inserci√≥n se forma un ID autoasignado diferente (similar a las secuencias de las BDs relacionales). Adicionalmente, MongoDB crea un atributo llamado ~_id~ EN AUTOM√ÅGICO, sin preguntarnos, que es donde se guarda esta llave autogenerada. Este atributo se encuentra en TODOS los documentos de 1er nivel (es decir, no est√° en los documentos _anidados_).

Estos IDs autogenerados son de 12 bytes y tienen la siguiente estructura:


#+DOWNLOADED: screenshot @ 2022-09-08 02:01:50
[[file:images/20220908-020150_screenshot.png]]


- *~time~*: timestamp del sistema operativo
- *~machine id~*: ID de la m√°quina
- *~process id~*: ID del proceso (un concepto de Unix)
- *~increment~*: contador autoincrementado de 3 bytes

Este tipo de IDs autogenerados es que podemos tener varias instancias de MongoDB corriendo en la misma m√°quina y no tendremos riesgos de colisiones. YAY!

**  Inertando m√∫ltiples documentos

Intentemos ahora:

#+begin_src js
db.towns.insertMany([
   {name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio",
      party: "D"
      }
   },
   {name: "London",
   population: 15000000,
   lastCensus: ISODate("2018-01-01"),
   famousFor: ["The British Museum", "Fish & Chips", "The Tate Modern"],
   mayor: {
      name: "Sadiq Khan",
      party: "L"
      }
   },
   {name: "Mexicalpan de las Tunas",
   population: 20000000,
   lastCensus: ISODate("2019-01-01"),
   famousFor: ["Museo Nacional de Antropolog√≠a", "Tacos de Canasta", "Tlacoyos"],
   mayor: {
      name: "Claudia Sheinbaum",
      party: "MORENA"
      }
   }
])
#+end_src
