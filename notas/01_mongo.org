#+TITLE: MongoDB
#+AUTHOR: Prof. Miguel Angel Escalante Serrato
#+EMAIL:  miguel.escalante@itam.mx
#+DATE: 8 Sep 2022
#+STARTUP: showall


* Intro Mongo

Mongo en muchas maneras es una gran herramienta y muy vers√°til, depende de c√≥mo la uses se puede adaptar a trabajar con tareas peque√±as, grandes, simples o complejas.

Peeeeeero, el diablo est√° en los detalles como siempre, tambi√©n se puede convertir en su peor pesadilla cuando a la creatividad no se le ponen riendas.

MongoDB (Mongo pa los cuates) vi√≥ la luz por primera vez en 2009 y r√°pido se estableci√≥ como una de las bases de datos NoSQL m√°s usadas, y actualmente es de las m√°s populares si no es que la m√°s popular. MongoDB se dise√±√≥ escalable desde un inicio ( el nombre viene de "hu mongo us" ) el desempe√±o y el f√°cil acceso a los datos fueron parte de su inicio.

Es una base de datos documental, lo cual nos permite guardar objetos anidados, tanto como quieras *sigh*. No pide ning√∫n tipo de /schema/ por lo que los documentos pueden tener campos que ning√∫n otro documento tenga *DEEEP SIGH*.

Aunque la flexibilidad nos llevar√≠a a no tomarlo tan en serio, realmente hay aplicaciones enormes que lo usan en producci√≥n hoy en d√≠a, e.g. Foursquare, Comcast, Adobe, CERN (cacha los datos del LHC).

* Contenedor de Docker
#+begin_src shell
  docker stop mongo
  docker rm mongo
  export DATA_DIR=`pwd`/data
  echo $DATA_DIR
  export EX_DIR=`pwd`/mongodb-sample-dataset
  echo $EX_DIR
  mkdir -p $DATA_DIR
  docker run -p 27017:27017 \
         -v $DATA_DIR:/data/db \
         -v $EX_DIR:/mongodb-sample-dataset \
         --name mongo \
         -d mongo
  export DHC=$(docker ps -aqf "name=mongo")
  sleep 2
  docker exec -it $DHC mongosh
#+end_src

#+RESULTS:

#+begin_src sh
  export DATA_DIR=`pwd`/data
  echo $DATA_DIR
  mkdir -p $DATA_DIR
  docker run -p 27017:27017 \
         -v $DATA_DIR:/data/db \
         --name mongo \
         -d mongo
#+end_src

#+RESULTS:


#+begin_src shell
  docker stop mongo
  docker rm mongo
#+end_src

#+RESULTS:
| mongo |
| mongo |

#+NAME: container
#+BEGIN_SRC sh
  docker ps -aqf "name=mongo"
#+END_SRC

#+RESULTS: container
: 840015a6853d

#+RESULTS:

#+begin_src shell :var DHC=container
  export DHC=$DHC
  export DHC=$(docker ps -aqf "name=mongo")
#+end_src

#+RESULTS:

#+begin_src shell :var DHC=container
  docker exec -it $DHC mongosh
#+end_src

*  Uso de MongoDB
**  Creando una DB e insertando documentos

Vamos a usar ~mongosh~ para tener una l√≠nea de comandos. Entraremos el comando:

#+begin_src js
use book
#+end_src

De acuerdo a la documentaci√≥n, este comando "crea una base de datos", pero esto no es enteramente cierto. Esto solo aparta espacio en el MongoDB para comenzar a agregar documentos (ojo: no son registros). No tenemos una BD formalmente creada hasta no agregar documentos a esa BD.

Para saber qu√© BD estamos usando:

#+begin_src js
db
#+end_src

#+RESULTS:

Y para ver todas las DBs que tenemos disponibles:

#+begin_src js
show dbs
#+end_src

Vamos ahora a agregar un documento:

#+begin_src js
  db.towns.insertOne({
     name: "New York",
     population: 22200000,
     lastCensus: ISODate("2016-07-01"),
     famousFor: ["the MOMA", "food", "The Met"],
     mayor: {
        name: "Bill de Blasio",
        party: "D"
     }
  })
#+end_src

Analicemos l√≠nea por l√≠nea:

1. *db* es el objeto con el que ~mongosh~ se refiere a la BD que estamos usando, en este caso ~book~. ‚ö†Ô∏è*IMPORTANTE*‚ö†Ô∏è - despu√©s del elemento db, tenemos el elemento *towns*, esto es una *COLECCI√ìN*. Recuerden la jerarqu√≠a de los JSON:

#+DOWNLOADED: screenshot @ 2022-09-08 01:56:15
[[file:images/20220908-015615_screenshot.png]]

Esto significa que estamos creando una colecci√≥n de documentos llamada ~towns~.

Igual, pongan atenci√≥n a uno de los features m√°s relevantes de las Document Databases:  *¬°No necesitamos predefinir estructura/esquema para crear colecciones ni documentos!* ü§ì

Por fin! Libres de la tiran√≠a de tener que definir, pensar, dise√±ar antes de tirar c√≥digo!


#+DOWNLOADED: screenshot @ 2022-09-08 01:58:46
[[file:images/20220908-015846_screenshot.png]]


El ~insertOne~ sirve para insertar solo 1 documento en la colecci√≥n.

El par√©ntesis que abre ~(~ indica el inicio de los argumentos de la funci√≥n ~insertOne~.

La llave que abre ~{~ indica que viene un documento JSON.

2. Inicia el documento con atributos ~name~ (string), ~population~ (number), ~lastCensus~ (Date), ~famousFor~ (array de strings), y ~mayor~ de tipo DOCUMENTO, que es otro objeto anidado con sus propios atributos, ‚ö†Ô∏èTODO SEPARADO POR COMAS‚ö†Ô∏è.

Qu√© pasa si se nos para una coma‚ùì

Un error como estos:

#+begin_src js
db.towns.insertOne({
   name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio"
      party: "D"
   }
})
#+end_src

F√≠jense igual que ~mongosh~ nos ayuda a identar la funci√≥n principal, y los documentos anidados.

3. Al cerrar llaves y par√©ntesis, debemos tener esta salida:

#+begin_src js
db.towns.insertOne({
   name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio",
      party: "D",
   }
})
#+end_src

Qu√© pasa si volvemos a ejecutar la misma inserci√≥n‚ùì

Las Document Databases no tienen "llaves" como las BDs relacionales, entonces *al ejecutar una inserci√≥n 2 veces, para MongoDB son objetos enteramente diferentes*, y de hecho cada inserci√≥n se forma un ID autoasignado diferente (similar a las secuencias de las BDs relacionales). Adicionalmente, MongoDB crea un atributo llamado ~_id~ EN AUTOM√ÅGICO, sin preguntarnos, que es donde se guarda esta llave autogenerada. Este atributo se encuentra en TODOS los documentos de 1er nivel (es decir, no est√° en los documentos _anidados_).

Estos IDs autogenerados son de 12 bytes y tienen la siguiente estructura:


#+DOWNLOADED: screenshot @ 2022-09-08 02:01:50
[[file:images/20220908-020150_screenshot.png]]


- *~time~*: timestamp del sistema operativo
- *~machine id~*: ID de la m√°quina
- *~process id~*: ID del proceso (un concepto de Unix)
- *~increment~*: contador autoincrementado de 3 bytes

Este tipo de IDs autogenerados es que podemos tener varias instancias de MongoDB corriendo en la misma m√°quina y no tendremos riesgos de colisiones. YAY!

**  Inertando m√∫ltiples documentos

Intentemos ahora:

#+begin_src js
db.towns.insertMany([
   {name: "New York",
   population: 22200000,
   lastCensus: ISODate("2016-07-01"),
   famousFor: ["the MOMA", "food", "The Met"],
   mayor: {
      name: "Bill de Blasio",
      party: "D"
      }
   },
   {name: "London",
   population: 15000000,
   lastCensus: ISODate("2018-01-01"),
   famousFor: ["The British Museum", "Fish & Chips", "The Tate Modern"],
   mayor: {
      name: "Sadiq Khan",
      party: "L"
      }
   },
   {name: "Mexicalpan de las Tunas",
   population: 20000000,
   lastCensus: ISODate("2019-01-01"),
   famousFor: ["Museo Nacional de Antropolog√≠a", "Tacos de Canasta", "Tlacoyos"],
   mayor: {
      name: "Claudia Sheinbaum",
      party: "MORENA"
      }
   }
])
#+end_src

** SQL es a BDs relacionales como JavaScript es a MongoDB

El lenguaje base de MongoDB es JavaScript. JavaScript tiene mala fama entre la comunidad de ingenier√≠a de software, pero es ampliamente gustado por la comunidad de desarrollo web. Principalmente por su inconsistencia...


#+DOWNLOADED: screenshot @ 2022-09-08 02:12:41
[[file:images/20220908-021241_screenshot.png]]


...por su abundancia de frameworks in√∫tiles...


#+DOWNLOADED: screenshot @ 2022-09-08 02:12:55
[[file:images/20220908-021255_screenshot.png]]


...aunque es el primero que nos ofrece productividad expedita.

Usaremos JavaScript para todo con MongoDB, hasta pedor ayuda:

#+begin_src js
db.help()
db.towns.help()
#+end_src

Igual podemos identificar el tipo de un objeto, justo como en JavaScript:

#+begin_src js
typeof db
typeof db.towns
typeof db.towns.insertOne
#+end_src

Examinemos el c√≥digo fuente de la funci√≥n ~insertOne~:

#+begin_src js
db.towns.insertOne //sin par√©ntesis
#+end_src

Esto ser√≠a como ver qu√© hay dentro del comando ~INSERT~ en una BD relacional, cosa que no podemos hacer!

Vamos a crear nuestra propia funci√≥n para insertar ciudades en la colecci√≥n ~db.towns~:

#+begin_src js
function insertCity(name, population, lastCensus, famousFor, mayorInfo) {
   db.towns.insertOne({
      name: name,
      population: population,
      lastCensus: ISODate(lastCensus),
      famousFor: famousFor,
      mayor : mayorInfo
   });
}
#+end_src

Esto es como un ~create function insertcity (string, numeric, date, string, string) AS 'insert into table city values ($1,$2,$3,$4,$5)'~ para PostgreSQL.

Podemos llamar esta funci√≥n ahora sin el ~db.towns.insertOne~. No es mucho ahorro, pero con _user-defined functions_ podemos hacer cosas m√°s elaboradas:

#+begin_src js
insertCity("Punxsutawney", 6200, '2016-01-31', ["Punxsutawney Phil"], { name : "Richard Alexander" })
insertCity("Portland", 582000, '2016-09-20', ["beer", "food", "Portlandia"], { name : "Ted Wheeler", party : "D" })
#+end_src

** Leyendo datos: SELECT en SQL, find() en MongoDB

Para ensayar las funciones de consulta, debemos importar algunas BDs de prueba.

*** Vamos a clonar este repo en nuestro directorio preferido. Opcionalmente podemos bajar el archivo ZIP de ese URL

#+begin_src sh
  git clone https://github.com/neelabalan/mongodb-sample-dataset
#+end_src

*** Vamos a utilizar el comando import de esa localidad para insertar uno de los JSONs del repo que descargamos:

#+begin_src sh :var DHC=container
  docker exec $DHC mongoimport --db trainingsessions --drop --file ./mongodb-sample-dataset/sample_training/tweets.json
  docker exec -it $DHC mongosh
#+end_src

¬øPor qu√© fall√≥?
#+NOTE Agregar por qu√© fall√≥ y c√≥mo arreglarlo
*** Validamos que haya sido insertada esa colecci√≥n correctamente:

#+begin_src js
use trainingsessions
db.getCollectionNames()
db.tweets.find()
#+end_src

Ahora si vamos a leer estos datos. Para leer datos en MongoDB la funci√≥n base es ~find()~:

- ~db.towns.find()~ trae todos los _documentos_ de la _colecci√≥n_ ~towns~.
- ~db.towns.find({ "_id" : ObjectId("611ce2e73afe7ee944574e51") })~ va a traer el documento con ID ~611ce2e73afe7ee944574e51~. Recordemos que los ID son autogenerados y el atributo ~_id~ es creado autom√°ticamente
- ~db.towns.find( {"_id" : ObjectId("611ce2e73afe7ee944574e51")}, {population : 1} )~ va a traer el documento con ID ~611ce2e73afe7ee944574e51~ pero solo su atributo ~population~ similar a un ~select population from towns where id = 611ce2e73afe7ee944574e51~
- ~db.towns.find( {"_id" : ObjectId("611ce2e73afe7ee944574e51")}, {population : 0} )~ va a traer el mismo documento, pero ahora con todos sus atributos *EXCEPTO* ~population~
- ~db.towns.find( {population : 6200})~ va a traer el documento con ~population~ igual a _6200_
- ~db.towns.find( {name : "London"})~ va a traer el documento con ~name~ igual a _"London"_

En general, podemos decir que la funci√≥n ~find()~ frecuentemente es llamada con 2 _documentos_ como argumento:

- 1 para filtrado, similar al ~WHERE~ de SQL. Esto se le llama *FILTER* en bases de datos de documentos.
- 1 para _selecci√≥n_ de atributos, similar al ~SELECT~ de SQL. Esto se le llama *PROJECT* en bases de datos de documentos.

Vamos a establecer algunas equivalencias entre SQL y MongoDB con la siguiente tabla y la colecci√≥n ~tweets~ que acabamos de importar. Para ejecutar los ejemplos primero debemos entrar ~use trainingsessions~.

| Operaci√≥n                  | Sintaxis                                 | E.g.                                                       | Equivalencia RDBMS                                                                                                                                |
|----------------------------+------------------------------------------+------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------|
| Igual a X                  | ~{"key":[value]}~                        | ~db.tweets.find({"source":"web"})~                         | where source = 'web'                                                                                                                              |
| AND en el WHERE            | ~{"key1":[value1],"key2":[value2]}~      | ~db.tweets.find({"source":"web","favorited":false})~       | where source = 'web' *and* favorited = false                                                                                                      |
| Menor que                  | ~{"key":{$lt:[value]}}~                  | ~db.tweets.find({"user.friends_count":{$lt:50}})~          | where user.friends_count < 50 (aqu√≠ estamos "viajando" del documento principal al documento anidado ~user~ y de ah√≠ a su atributo ~friends_count~ |
| Menor o igual a            | ~{"key":{$lte:[value]}}~                 | ~db.tweets.find({"user.friends_count":{$lte:50}})~         | where user.friends_count <= 50                                                                                                                    |
| Mayor que                  | ~{"key":{$gt:[value]}}~                  | ~db.tweets.find({"user.friends_count":{$gt:50}})~          | where user.friends_count > 50                                                                                                                     |
| Mayor o igual a            | ~{"key":{$gte:[value]}}~                 | ~db.tweets.find({"user.friends_count":{$gte:50}})~         | where user.friends_count >= 50                                                                                                                    |
| Diferente a                | ~{"key":{$ne:[value]}}~                  | ~db.tweets.find({"user.friends_count":{$ne:50}})~          | where user.friends_count != 50                                                                                                                    |
| Valores presentes en array | ~{"key":{$in:[value1,value2...valueN]}}~ | ~db.tweets.find({"entities.urls.indices":{$in:[54,74]}})~  | where entities.urls.indices *in* (54,74)                                                                                                          |
| Valores ausentes en array  | ~{"key":{$nin:[value]}}~                 | ~db.tweets.find({"entities.urls.indices":{$nin:[54,74]}})~ | where entities.urls.indices *not in* (54,74)                                                                                                      |

** Uso de expresiones regulares en ~find()~

Para lograr emular el ~LIKE~ de SQL en MongoDB, debemos usar forzosamente expresiones regulares. Por ejemplo:

#+begin_src js
db.tweets.find({"user.url":/^http(s|):\/\/(www\.|)facebook\.com/})
#+end_src

Esto es similar a la sentencia SQL:

#+end_srcsql
...where user.url like 'http?://facebook.com%'
#+end_src

Esto va a encontrar todos los tuits cuyo URL del perfil de usuario sean ligas a perfiles de FB.

Para encontrar todos los tuits con el hashtag que comience on ~#polit~:

#+begin_src js
db.tweets.find({"entities.hashtags.text":/^polit/})
#+end_src

En este caso, el caracter ~^~ indica que el match debe darse desde el principio, porque si no lo ponemos, vamos a hacer match con este tuit que anda por ah√≠:

#+begin_src js
{
   "_id":{
      "$oid":"5c8eccb1caa187d17ca64de8"
   },
   "text":"Balmoral, booze and the rest of Blair's book digested  http://bit.ly/9KwcSP  #Blair #AJourney #UKpolitics #Labour #Bush",
   "in_reply_to_status_id":null,
   "retweet_count":null,
   "contributors":null,
   "created_at":"Thu Sep 02 18:34:32 +0000 2010",
   "geo":null,
   "source":"<a href=\"http://www.tweetdeck.com\" rel=\"nofollow\">TweetDeck</a>",
   "coordinates":null,
   "in_reply_to_screen_name":null,
   "truncated":false,
   "entities":{
      "user_mentions":[

      ],
      "urls":[
         {
            "indices":[
               55,
               75
            ],
            "url":"http://bit.ly/9KwcSP",
            "expanded_url":null
         }
      ],
      "hashtags":[
         {
            "text":"Blair",
            "indices":[
               77,
               83
            ]
         },
         {
            "text":"AJourney",
            "indices":[
               84,
               93
            ]
         },
         {
            "text":"UKpolitics",
            "indices":[
               94,
               105
            ]
         },
         {
            "text":"Labour",
            "indices":[
               106,
               113
            ]
         },
         {
            "text":"Bush",
            "indices":[
               114,
               119
            ]
         }
      ]
   },
   "retweeted":false,
   "place":null,
   "user":{
      "friends_count":556,
      "profile_sidebar_fill_color":"DDEEF6",
      "location":"",
      "verified":false,
      "follow_request_sent":null,
      "favourites_count":0,
      "profile_sidebar_border_color":"C0DEED",
      "profile_image_url":"http://a2.twimg.com/profile_images/1026348478/US-UK-blend_normal.png",
      "geo_enabled":false,
      "created_at":"Sat Jun 26 14:58:34 +0000 2010",
      "description":"Promoting and discussing the special relatonship between the United States and the United Kingdom.",
      "time_zone":null,
      "url":null,
      "screen_name":"USUKrelations",
      "notifications":null,
      "profile_background_color":"C0DEED",
      "listed_count":4,
      "lang":"en",
      "profile_background_image_url":"http://a3.twimg.com/profile_background_images/116769793/specialrelations.jpg",
      "statuses_count":647,
      "following":null,
      "profile_text_color":"333333",
      "protected":false,
      "show_all_inline_media":false,
      "profile_background_tile":true,
      "name":"Special Relationship",
      "contributors_enabled":false,
      "profile_link_color":"0084B4",
      "followers_count":264,
      "id":159870717,
      "profile_use_background_image":true,
      "utc_offset":null
   },
   "favorited":false,
   "in_reply_to_user_id":null,
   "id":{
      "$numberLong":"22820800600"
   }
}
#+end_src

En esta materia no veremos a fondo expresiones regulares, pero aqu√≠ 2 ligas √∫tiles:

1. https://regexone.com/ es un crash course r√°pido para aprender las bases de las expresiones regulares
2. https://regexr.com/ es una plataformita para probar sus regexp contra ejemplos suyos o de terceros

*‚ö†Ô∏èIMPORTANTE:‚ö†Ô∏è* Las expresiones regulares que deben ir en estos queries son [Perl-compatible Regular Expressions (PCRE)](https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions)

** Queries a arrays

A diferencia de las RDBMS, las Document Databases aceptan en sus atributos arrays de valores.

Recuerden que las reglas de dise√±o de las relacionales nos obligan a que *un atributo tenga solo 1 valor*, mientras que en las de documentos un atributo puede ser un string, un n√∫mero, o un arreglo de cualquiera de ambos.

Este query va a regresar el documento que tenga *√öNICA Y EXACTA Y ORDENADAMENTE* los elementos *54 y 74*.

#+begin_src js
db.tweets.find({"entities.urls.indices":[54,74]})
#+end_src
Osea, si hay un elemento que tiene el orden *74 y 54*, no no lo va a encontrar.

Para buscarlos a todos, *sin importar orden*, usamos el operador ~$all~:

#+begin_src js
db.tweets.find({"entities.urls.indices":{$all:[54,74]}})
#+end_src

Para buscar todos los documentos que *AL MENOS* tengan uno de los elementos:

#+begin_src js
db.tweets.find({"entities.urls.indices":54})
#+end_src

O usar el operador ~$in~ que vimos arriba.

Para buscar un rango en un array num√©rico, en este caso, entre 50 y 90, inclusive:

#+begin_src js
db.tweets.find({"entities.urls.indices":{$lte:50, $gte:90}})
#+end_src

Y para buscar documentos cuyo N-avo elemento sea igual a X:

#+begin_src js
db.tweets.find({"entities.urls.indices.10000":59})
#+end_src

Recordemos  que los arrays en MongoDB *est√°n indexados desde 0 y no desde 1*.

Para buscar un documento por el tama√±o de uno de sus atributos de tipo array:

#+begin_src js
db.tweets.find({"entities.hashtags":{$size:7}})
#+end_src

Y para buscar documentos cuyos atributos tipo array tengan m√°s de 7 elementos:

#+begin_src js
db.tweets.find({"entities.hashtags.7":{$exists:true}})
#+end_src

Podemos combinar operadores ~$exists~, ~$gte~ y ~$lte~ para buscar documentos que tengan un array entre N y M elementos. El siguiente query regresa los tuits que tengan *EXACTAMENTE* un hashtag, aprovechando la _dot notation (.)_ para viajar de ~entities->hashtags->[elemento del array con √≠ndice 0]~ y verificar su existencia con ~{$exists:true}~, y hacer elk mismo viaje al ~[elemento del array con √≠ndice 1]~ y asegurarnos que no existe con ~{$exists:false}~.

#+begin_src js
db.tweets.find({"entities.hashtags.1":{$exists:false},"entities.hashtags.0":{$exists:true}},{"entities":1})
#+end_src

El racional de esta forma de ~find()~ es que si buscamos arrays con num de elementos mayores a 7, entonces tendremos arrays cuyo elemento en la posici√≥n 7 (que realmente es la posici√≥n 8 porque *comenzamos desde 0*) debe tener un elemento presente.

** Queries a documentos anidados y arrays de documentos

Para los siguientes ejemplos vamos a insertar estos documentos con la funci√≥n ~insertMany()~:

#+begin_src js
[
   {
      "item":"journal",
      "instock":[
         {
            "warehouse":"A",
            "qty":5
         },
         {
            "warehouse":"C",
            "qty":15
         }
      ]
   },
   {
      "item":"notebook",
      "instock":[
         {
            "warehouse":"C",
            "qty":5
         }
      ]
   },
   {
      "item":"paper",
      "instock":[
         {
            "warehouse":"A",
            "qty":60
         },
         {
            "warehouse":"B",
            "qty":15
         }
      ]
   },
   {
      "item":"planner",
      "instock":[
         {
            "warehouse":"A",
            "qty":40
         },
         {
            "warehouse":"B",
            "qty":5
         }
      ]
   },
   {
      "item":"postcard",
      "instock":[
         {
            "warehouse":"B",
            "qty":15
         },
         {
            "warehouse":"C",
            "qty":35
         }
      ]
   }
]
#+end_src

1. Creen una nueva BD llamada ~warehouse~
2. Creen una colecci√≥n llamada ~inventory~
3. Inserten estos documentos de arriba

El siguiente query va a regresar todos los art√≠culos que est√©n en en warehouse A y de los que tengamos 5 en inventario:

#+begin_src js
db.inventory.find( { "instock": { warehouse: "A", qty: 5 } } )
#+end_src

El valor de retorno es:

#+begin_src js
[
  {
    _id: ObjectId("612339842cd2fe46682acd32"),
    item: 'journal',
    instock: [ { warehouse: 'A', qty: 5 }, { warehouse: 'C', qty: 15 } ]
  }
]
#+end_src

El query no nos est√° regresando 2 documentos, sino el documento en el array ~instock~ que hace match con las condiciones que le dimos.

*üëÄOJO:üëÄ* esta sintaxis es parecida a la b√∫squeda de documentos de 1er nivel (~find("key1":value1,"key2":value2~), pero como estamos buscando documentos *ANIDADOS O EN ARRAY*, entonces debemos de especificar el nombre del array ~instock~ antes de los params de b√∫squeda.

Una gran diferencia es en el orden de los atributos que estemos buscando en el array de documentos. Por ejemplo, si ejecutamos esto:

#+begin_src js
db.inventory.find( { "instock": { qty: 5, warehouse: "A" } } )
#+end_src

Va a regresar *NADA*, porque ning√∫n documento dentro del array tiene primero el atributo ~qty~.

El siguiente query va a regresar todos los documentos de ~instock~ que tengan un ~qty~ menor o igual a 20, junto con los documentos que acompa√±en a ese que hace match:

#+begin_src js
db.inventory.find( { "instock.qty": { $lte: 20 } } )
#+end_src

Este query tambi√©n es similar a los que vimos para consultar documentos de 1er nivel, con la diferencia de que ~instock~ es un array de documentos y no un atributo o un array de elementos individuales.

Si deseamos limitar la b√∫squeda a un √≠ndice del array, como para evitar tener un documento que no cumpla con las condiciones, podemos especificarlo as√≠:

#+begin_src js
db.inventory.find( { 'instock.0.qty': { $lte: 20 } } )
#+end_src

Este query nos regresar√° del arreglo ~instock~ los *PRIMEROS* documentos (√≠ndice 0) cuyo atributo ~qty~ sea igual o menor a 20.

** El operador ~$elemMatch~

Hay estructuras de documentos de varios niveles y con arreglos anidados donde al lanzar queries a estos arreglos puede regresarnos documentos que no necesariamente cumplen el criterio.

1. Vamos a crear otra BD llamada "store"
2. Con una colecci√≥n llamada "articles"
3. Insertamos este array de documentos con ~insertMany~

#+begin_src js
db.articles.insertMany([
{
	"_id" : 1,
	"description" : "DESCRIPTION ARTICLE AB",
	"article_code" : "AB",
	"purchase" : [
		{
			"company" : 1,
			"cost" : NumberDecimal("80.010000")
		},
		{
			"company" : 2,
			"cost" : NumberDecimal("85.820000")
		},
		{
			"company" : 3,
			"cost" : NumberDecimal("79.910000")
		}
	],
	"stock" : [
	    {
	        "country" : "01",
	        "warehouse" : {
	            "code" : "02",
	            "units" : 10
	        }
	    },
	    {
	        "country" : "02",
	        "warehouse" : {
	            "code" : "02",
	            "units" : 8
	        }
	    }
	]
},
{
	"_id" : 2,
	"description" : "DESCRIPTION ARTICLE AC",
	"article_code" : "AC",
	"purchase" : [
		{
			"company" : 1,
			"cost" : NumberDecimal("90.010000")
		},
		{
			"company" : 2,
			"cost" : NumberDecimal("95.820000")
		},
		{
			"company" : 3,
			"cost" : NumberDecimal("89.910000")
		}
	],
	"stock" : [
	    {
	        "country" : "01",
	        "warehouse" : {
	            "code" : "01",
	            "units" : 20
	        }
	    },
	    {
	        "country" : "02",
	        "warehouse" : {
	            "code" : "02",
	            "units" : 28
	        }
	    }
	]
}
]);
#+end_src

Qu√© funci√≥n ~find()~ necesitamos para obtener los "art√≠culos" con ~stock~ en el ~warehouse~ 02 en el ~country~ 01?

#+begin_src js
db.articles.find({"stock.country":"01","stock.warehouse.code":"02"})
#+end_src

Ese query nos va a regresar los 2 documentos que insertamos:


Como podemos ver, el array ~stock~ del documento de 1er nivel con ~_id~ 2 cumple con las condiciones *POR SEPARADO*, por lo tanto este query nos puede regresar resultados espurios _si es que estamos buscando solamente el documento cuyo array ~stock~ tenga un elemento que cumpla *CON AMBOS CRITERIOS*.

Para tener el comportamiento esperado, debemos usar el operador ~$elemMatch~:

#+begin_src js
db.articles.find({ stock : { $elemMatch : { country : "01", "warehouse.code" : "02" } } })
#+end_src

Esto nos debe dar el documento correcto:


El operador ~$elemMatch~ sirve para encontrar elementos individuales *que cumplan con m√∫ltiples criterios _TODOS JUNTOS_ (a manera de ~and~)*, al contrario del funcionamiento normal sobre arrays, donde nos regresa los arreglos que cumplan con *_AL MENOS_* uno de los criterios *_POR SEPARADO_*.

** El operador ~$slice~

El operador ~$slice~, por su parte, "rebana" un arreglo de un documento para regresarnos solamente N elementos:

#+begin_src js
db.articles.find({},{"purchase":{$slice:1}})
#+end_src

Este query nos regresar√° todos los documentos, pero su array ~purchase~ solo tendr√° el 1er elemento. ~$slice~ acepta *n√∫meros positivos* para "rebanar" el array de izq a derecha, y *n√∫meros negativos* para "rebanarlo" de derecha a izq:}

#+begin_src js
db.articles.find({},{"purchase":{$slice:-4}})
#+end_src
#+begin_src js
db.articles.find()
#+end_src
Del mismo modo, podemos usar el operador ~$slice~ para obtener un elemento en espec√≠fico del array usando la forma ~find({},{atributo:{$slice:[indice_inicio, numero_de_elementos]}}~. El siguiente comando traer√° solamente el 2o elemento de los arrays ~purchase~.

#+begin_src js
db.articles.find({},{purchase:{$slice:[0,1]}})
#+end_src

Aqu√≠ nos posicionamos en el √≠ndice 1 (el 2o elemento), y a partir de ah√≠, traemos 1 elemento.

* Ejercicios

Usaremos la BD ~restaurants.json~ para estos ejercicios.

Primero debemos [descargar el archivo ~restaurants.json~ de [[https://github.com/Skalas/nosql2022/raw/main/datasets/restaurants.zip][aqu√≠]].

Luego lo debemos cargar con ~mongoimport~, *recuerden c√≥mo lo hicimos arriba* :

#+begin_src sh
mongoimport --db=reviews --collection=restaurants --file=restaurants.json
#+end_src

La estructura de esta colecci√≥n de documentos es la siguiente (aunque recuerden que no nos debemos fiar, porque MongoDB no tiene estructura predefinida).

#+begin_src js
{
  "address": {
     "building": "1007",
     "coord": [ -73.856077, 40.848447 ],
     "street": "Morris Park Ave",
     "zipcode": "10462"
  },
  "borough": "Bronx",
  "cuisine": "Bakery",
  "grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
  "name": "Morris Park Bake Shop",
  "restaurant_id": "30075445"
}
#+end_src

Vamos a responder las siguientes preguntas:

1. Escribe una funci√≥n find() para mostrar todos los documentos de la colecci√≥n de restaurantes.

#+begin_src js
db.restaurants.find()
#+end_src


2. Escribe una funci√≥n find() para mostrar los campos restaurant_id, nombre, municipio y cocina para todos los documentos en el restaurante de la colecci√≥n.

#+begin_src js
  db.restaurants.find({},{
      "restaurant_id":1,
      "name":1,
      "borough":1,
      "cuisine":1
  })
#+end_src


3. Escribe una funci√≥n find() para mostrar los campos restaurant_id, nombre, municipio y cocina, pero excluya el campo ~_id~ para todos los documentos de la colecci√≥n restaurant.

#+begin_src js
  db.restaurants.find({},{
      "restaurant_id":1,
      "name":1,
      "borough":1,
      "cuisine":1,
      "_id":0
  })
#+end_src


1. Escribe una funci√≥n find() para mostrar los campos restaurant_id, nombre, municipio y c√≥digo postal, pero excluya el campo ~_id~ para todos los documentos de la colecci√≥n restaurant.

#+begin_src js
  db.restaurants.findOne({},{
      "restaurant_id":1,
      "name":1,
      "borough":1,
      "address.zipcode":1,
      "_id":0
  })
#+end_src


5. Escribe una funci√≥n find() para mostrar todos los restaurantes que se encuentran en el distrito del Bronx.

#+begin_src js
db.restaurants.find({"borough":"Bronx"})
#+end_src


6. Escribe una funci√≥n find() para mostrar los primeros 5 restaurantes que se encuentran en el condado del Bronx.

#+begin_src js
  db.restaurants.find({"borough":"Bronx"}).limit(5).count()
#+end_src


7. Escribe una funci√≥n find() para mostrar los siguientes 5 restaurantes despu√©s de omitir los primeros 5 que se encuentran en el condado del Bronx.

#+begin_src js
  db.restaurants.find({"borough":"Bronx"}).skip(5).limit(5)
#+end_src


8. Escribe una funci√≥n find() para encontrar los restaurantes que obtuvieron una puntuaci√≥n de m√°s de 90.

#+begin_src js
  db.restaurants.find({"grades.score": {$gt:90}},{"grades.score":1})
#+end_src


9. Escribe una funci√≥n find() para encontrar los restaurantes que obtuvieron una puntuaci√≥n, m√°s de 80 pero menos de 100.

#+begin_src js
  db.restaurants.find({"grades.score": {$gt:80, $lt:100}},{"grades.score":1})
#+end_src

#+begin_src js
  db.restaurants.find({"grades": {$elemMatch:{"score":{$gt:80, $lt:100}}}  },{"grades.score":1})
#+end_src
10. Escribe una funci√≥n find() para encontrar los restaurantes que se ubican en un valor de latitud menor que -95.754168.

#+begin_src js
db.restaurants.find({"address.coord.0": {$lt: -95.754168 }},{"address.coord":1})
#+end_src

11. Escribe una funci√≥n find() para encontrar los restaurantes que no preparan ning√∫n tipo de cocina de 'estadounidense' y su puntuaci√≥n de calificaci√≥n es superior a 70 y latitud inferior a -65.754168.

#+begin_src js
  db.restaurants.distinct("cuisine")
  db.restaurants.find({
      "cuisine":{$ne:"American "},
      "address.coord.0": {$lt: -65.754168 },
      "grades.score": {$gt:70}
  }, {"cuisine":1, "grades":1,"address.coord":1})
#+end_src

#+begin_src js
  db.restaurants.find({
      "cuisine":{$not:/^American/},
      "address.coord.0": {$lt: -65.754168 },
      "grades.score": {$gt:70}
  }, {"cuisine":1, "grades":1,"address.coord":1}).count()
#+end_src

12. Escribe una funci√≥n find() para encontrar los restaurantes que no preparan ninguna cocina del continente americano y lograron una puntuaci√≥n superior a 70 y se ubicaron en la longitud inferior a -65.754168.

#+begin_src js
   db.restaurants.find({
      "cuisine":{$nin:["American ", "Mexican"]},
      "address.coord.0": {$lt: -65.754168 },
      "grades.score": {$gt:70}
  }, {"cuisine":1})
#+end_src

13. Escribe una funci√≥n find() para encontrar los restaurantes que no preparan ninguna cocina del continente americano y obtuvieron una calificaci√≥n de 'A' que no pertenece al distrito de Brooklyn. El documento debe mostrarse seg√∫n la cocina en orden descendente.

#+begin_src js
//resupesta aqu√≠
#+end_src

14. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que contienen 'Wil' como las primeras tres letras de su nombre.

#+begin_src js
//resupesta aqu√≠
#+end_src

15. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que contienen "ces" como las √∫ltimas tres letras de su nombre.

#+begin_src js
//resupesta aqu√≠
#+end_src

16. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que contienen 'Reg' como tres letras en alg√∫n lugar de su nombre.

#+begin_src js
//resupesta aqu√≠
#+end_src


17. Escribe una funci√≥n find() para encontrar los restaurantes que pertenecen al municipio del Bronx y que prepararon platos estadounidenses o chinos.

#+begin_src js
//resupesta aqu√≠
#+end_src

18. Escribe una funci√≥n find() para encontrar la identificaci√≥n del restaurante, el nombre, el municipio y la cocina de los restaurantes que pertenecen al municipio de Staten Island o Queens o Bronxor Brooklyn.

#+begin_src js
//resupesta aqu√≠
#+end_src

19. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que no pertenecen al municipio de Staten Island o Queens o Bronxor Brooklyn.

#+begin_src js
//resupesta aqu√≠
#+end_src

20. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que obtuvieron una puntuaci√≥n que no sea superior a 10.

#+begin_src js
//resupesta aqu√≠
#+end_src


21. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, el municipio y la cocina de aquellos restaurantes que prepararon platos excepto 'Americano' y 'Chinese' o el nombre del restaurante comienza con la letra 'Wil'.

#+begin_src js
//resupesta aqu√≠
#+end_src

22. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre y las calificaciones de los restaurantes que obtuvieron una calificaci√≥n de "A" y obtuvieron una puntuaci√≥n de 11 en un ISODate "2014-08-11T00: 00: 00Z" entre muchas de las fechas de la encuesta. .

#+begin_src js
//resupesta aqu√≠
#+end_src

23. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre y las calificaciones de aquellos restaurantes donde el segundo elemento de la matriz de calificaciones contiene una calificaci√≥n de "A" y una puntuaci√≥n de 9 en un ISODate "2014-08-11T00: 00: 00Z".

#+begin_src js
//resupesta aqu√≠
#+end_src

24. Escribe una funci√≥n find() para encontrar el ID del restaurante, el nombre, la direcci√≥n y la ubicaci√≥n geogr√°fica para aquellos restaurantes donde el segundo elemento de la matriz de coordenadas contiene un valor que sea m√°s de 42 y hasta 52.

#+begin_src js
//resupesta aqu√≠
#+end_src

25. Escribe una funci√≥n find() para organizar el nombre de los restaurantes en orden ascendente junto con todas las columnas.

#+begin_src js
//resupesta aqu√≠
#+end_src

26. Escribe una funci√≥n find() para organizar el nombre de los restaurantes en orden descendente junto con todas las columnas.

#+begin_src js
//resupesta aqu√≠
#+end_src

27. Escribe una funci√≥n find() para organizar el nombre de la cocina en orden ascendente y para ese mismo distrito de cocina debe estar en orden descendente.

#+begin_src js
//resupesta aqu√≠
#+end_src

28. Escribe una funci√≥n find() para saber si todas las direcciones contienen la calle o no.

#+begin_src js
//resupesta aqu√≠
#+end_src

29. Escribe una funci√≥n find() que seleccionar√° todos los documentos de la colecci√≥n de restaurantes donde el valor del campo coord es Double.

#+begin_src js
//resupesta aqu√≠
#+end_src


30. Escribe una funci√≥n find() que seleccionar√° el ID del restaurante, el nombre y las calificaciones para esos restaurantes que devuelve 0 como resto despu√©s de dividir la puntuaci√≥n por 7.

#+begin_src js
//resupesta aqu√≠
#+end_src


31. Escribe una funci√≥n find() para encontrar el nombre del restaurante, el municipio, la longitud y la actitud y la cocina de aquellos restaurantes que contienen "mon" como tres letras en alg√∫n lugar de su nombre.

#+begin_src js
//resupesta aqu√≠
#+end_src

32. Escribe una funci√≥n find() para encontrar el nombre del restaurante, el distrito, la longitud y la latitud y la cocina de aquellos restaurantes que contienen 'Mad' como las primeras tres letras de su nombre.

#+begin_src js
//resupesta aqu√≠
#+end_src
